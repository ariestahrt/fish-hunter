// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	urls "fish-hunter/businesses/urls"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CountTotal provides a mock function with given fields:
func (_m *Repository) CountTotal() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *Repository) GetAll() ([]urls.Domain, error) {
	ret := _m.Called()

	var r0 []urls.Domain
	if rf, ok := ret.Get(0).(func() []urls.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]urls.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *Repository) GetByID(id string) (urls.Domain, error) {
	ret := _m.Called(id)

	var r0 urls.Domain
	if rf, ok := ret.Get(0).(func(string) urls.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(urls.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalBetweenDates provides a mock function with given fields: startDate, endDate
func (_m *Repository) GetTotalBetweenDates(startDate time.Time, endDate time.Time) (int64, error) {
	ret := _m.Called(startDate, endDate)

	var r0 int64
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) int64); ok {
		r0 = rf(startDate, endDate)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: domain
func (_m *Repository) Save(domain urls.Domain) (urls.Domain, error) {
	ret := _m.Called(domain)

	var r0 urls.Domain
	if rf, ok := ret.Get(0).(func(urls.Domain) urls.Domain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(urls.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(urls.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
