// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	datasets "fish-hunter/businesses/datasets"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Activate provides a mock function with given fields: id
func (_m *UseCase) Activate(id string) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Download provides a mock function with given fields: id
func (_m *UseCase) Download(id string) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *UseCase) GetByID(id string) (datasets.Domain, error) {
	ret := _m.Called(id)

	var r0 datasets.Domain
	if rf, ok := ret.Get(0).(func(string) datasets.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(datasets.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields: status
func (_m *UseCase) Status(status string) ([]datasets.Domain, error) {
	ret := _m.Called(status)

	var r0 []datasets.Domain
	if rf, ok := ret.Get(0).(func(string) []datasets.Domain); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datasets.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopBrands provides a mock function with given fields:
func (_m *UseCase) TopBrands() (map[string]interface{}, error) {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: domain
func (_m *UseCase) Validate(domain datasets.Domain) (datasets.Domain, error) {
	ret := _m.Called(domain)

	var r0 datasets.Domain
	if rf, ok := ret.Get(0).(func(datasets.Domain) datasets.Domain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(datasets.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datasets.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
